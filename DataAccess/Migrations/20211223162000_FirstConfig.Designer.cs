// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211223162000_FirstConfig")]
    partial class FirstConfig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Entities.Barcode", b =>
                {
                    b.Property<int>("BarcodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BarcodeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StockId")
                        .HasColumnType("int")
                        .HasColumnName("StockID");

                    b.HasKey("BarcodeId");

                    b.ToTable("Barcodes");
                });

            modelBuilder.Entity("DataAccess.Entities.Firm", b =>
                {
                    b.Property<int>("FirmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FirmID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Phone")
                        .HasColumnType("numeric(18,0)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Vkn")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("FirmId");

                    b.ToTable("Firms");
                });

            modelBuilder.Entity("DataAccess.Entities.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BarcodeId")
                        .HasColumnType("int")
                        .HasColumnName("BarcodeID");

                    b.Property<decimal?>("BuyingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FirmId")
                        .HasColumnType("int")
                        .HasColumnName("FirmID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("UnitID");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("WarehouseID");

                    b.HasKey("Id");

                    b.HasIndex("BarcodeId");

                    b.HasIndex("FirmId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("DataAccess.Entities.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UnitID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UnitId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FirmId")
                        .HasColumnType("int")
                        .HasColumnName("FirmID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("FirmId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataAccess.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FirmId")
                        .HasColumnType("int")
                        .HasColumnName("FirmID");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FirmId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("DataAccess.Entities.Stock", b =>
                {
                    b.HasOne("DataAccess.Entities.Barcode", "Barcode")
                        .WithMany("Stocks")
                        .HasForeignKey("BarcodeId")
                        .HasConstraintName("FK_Stocks_Barcodes")
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Firm", "Firm")
                        .WithMany("Stocks")
                        .HasForeignKey("FirmId")
                        .HasConstraintName("FK_Stocks_Firms")
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Unit", "Unit")
                        .WithMany("Stocks")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_Stocks_Units")
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Warehouse", "Warehouse")
                        .WithMany("Stocks")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("FK_Stocks_Warehouses");

                    b.Navigation("Barcode");

                    b.Navigation("Firm");

                    b.Navigation("Unit");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.HasOne("DataAccess.Entities.Firm", "Firm")
                        .WithMany("Users")
                        .HasForeignKey("FirmId")
                        .HasConstraintName("FK_Users_Firms")
                        .IsRequired();

                    b.Navigation("Firm");
                });

            modelBuilder.Entity("DataAccess.Entities.Warehouse", b =>
                {
                    b.HasOne("DataAccess.Entities.Firm", "Firm")
                        .WithMany("Warehouses")
                        .HasForeignKey("FirmId")
                        .HasConstraintName("FK_Warehouses_Firms")
                        .IsRequired();

                    b.Navigation("Firm");
                });

            modelBuilder.Entity("DataAccess.Entities.Barcode", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("DataAccess.Entities.Firm", b =>
                {
                    b.Navigation("Stocks");

                    b.Navigation("Users");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("DataAccess.Entities.Unit", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("DataAccess.Entities.Warehouse", b =>
                {
                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
